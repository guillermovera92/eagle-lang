export *

interface Queue
{
    func add(any^ e)
    func remove() : any^
    func count() : int
}

class LinkedList(Queue)
{
    int length
    LLNode^ tail
    LLNode^ head

    init()
    {
        self.length = 0
    }

    func add(any^ e)
    {
        self.length += 1
        var n = new LLNode
        n.val = e

        if !self.head
        {
            self.head = n
            self.tail = n
            return
        }

        self.tail.next = n
        self.tail = n
    }

    func remove() : any^
    {
        if !self.head
            return nil

        var n = self.head
        self.head = self.head.next
        if !self.head
            self.tail = nil

        self.length -= 1
        return n.val
    }

    func count() : int
    {
        return self.length
    }
}

class LinkedListRaw
{
    int length
    LLNodeRaw^ tail
    LLNodeRaw^ head
    (any*:)^ onFree

    init()
    {
        self.length = 0
    }

    destruct()
    {
        if !self.onFree
            return

        var n = self.head
        for n; n; n = n.next
        {
            self.onFree(n.val)
        }
    }

    func add(any* e)
    {
        self.length += 1
        var n = new LLNodeRaw
        n.val = e

        if !self.head
        {
            self.head = n
            self.tail = n
            return
        }

        self.tail.next = n
        self.tail = n
    }

    func remove() : any*
    {
        if !self.head
            return nil

        var n = self.head
        self.head = self.head.next
        if !self.head
            self.tail = nil

        self.length -= 1
        return n.val
    }

    func get(int i) : any*
    {
        var n = self.head
        for int ct = 0; ct < i; ct += 1
        {
            n = n.next
        }

        return n.val
    }

    func last() : any*
    {
        return self.tail.val
    }

    func count() : int
    {
        return self.length
    }

    func dup() : LinkedListRaw^
    {
        var out = new LinkedListRaw()
        var n = self.head
        for n; n; n = n.next
        {
            out.add(n.val)
        }

        return out
    }

    func split(LLNodeRaw^ head, LLNodeRaw^* front, LLNodeRaw^* back)
    {
        LLNodeRaw^ slow
        LLNodeRaw^ fast

        if !head || !head.next
        {
            front^ = head
            back^ = nil
            return
        }

        slow = head
        fast = head.next

        for fast
        {
            fast = fast.next

            if fast
            {
                slow = slow.next
                fast = fast.next
            }
        }

        front^ = head
        back^ = slow.next

        slow.next = nil
    }


    func merge((any*, any* : int)^ test, LLNodeRaw^ left, LLNodeRaw^ right) : LLNodeRaw^
    {
        if !left
            return right
        if !right
            return left

        LLNodeRaw^ head = nil
        LLNodeRaw^ tail = nil

        for left && right
        {
            int t = test(left.val, right.val)
            LLNodeRaw^ node
            if t <= 0
            {
                node = left
                left = left.next
            }
            else
            {
                node = right
                right = right.next
            }

            if !tail
            {
                head = node
                tail = node
            }
            else
            {
                tail.next = node
                tail = node
            }
        }

        if left
            tail.next = left
        elif right
            tail.next = right

        return head
    }

    func mergeSort((any*, any* : int)^ test, LLNodeRaw^ head) : LLNodeRaw^
    {
        LLNodeRaw^ a
        LLNodeRaw^ b

        if !head || !head.next
        {
            return head
        }

        self.split(head, &a, &b)

        a = self.mergeSort(test, a)
        b = self.mergeSort(test, b)

        var m = self.merge(test, a, b)
        return m
    }

    func sort((any*, any* : int)^ test)
    {
        self.head = self.mergeSort(test, self.head)
    }

    func each((any * :)^ callback)
    {
        for var n = self.head; n; n = n.next
        {
            callback(n.val)
        }
    }

    view (gen : any*)^
    {
        return list_raw_iter(self.head)
    }

    view int
    {

    }
}

-- [int, int : int]*
-- (int, int : int)^
-- (gen      : int)^

gen list_raw_iter(LLNodeRaw^ head) : any*
{
    for head; head; head = head.next
    {
        yield head.val
    }
}

struct LLNode
{
    LLNode^ next
    any^ val
}

struct LLNodeRaw
{
    LLNodeRaw^ next
    any* val
}

