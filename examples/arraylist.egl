extern func malloc(long) : any*
extern func realloc(any*, long) : any*
extern func free(any*)
extern func printf(byte*...) : int

class Arraylist
{
    any** items
    int count
    int allocated

    init(int size)
    {
        self.allocated = size
        self.count = 0
        self.items = malloc(size * sizeof(any*))
    }

    destruct()
    {
        for var i = 0; i < self.count; i += 1
        {
            __dec any^@(self.items[i])
        }

        free(self.items)
    }

    func append(weak any^ val) : Arraylist^
    {
        if self.count == self.allocated
        {
            self.allocated += 10
            self.items = realloc(self.items, self.allocated * sizeof(any*))
        }

        self.items[self.count] = any*@val
        __inc val

        self.count += 1

        return self
    }

    func remove(weak any^ val) : Arraylist^
    {
        int idx = -1
        for int i = 0; i < self.count; i += 1
        {
            if self.items[i] == val
            {
                idx = i
                break
            }
        }

        if idx < 0
            return self

        self.count -= 1
        if idx == self.count
        {
            __dec val
            return self
        }

        __dec val
        for int i = idx; i < self.count; i += 1
        {
            self.items[i] = self.items[i + 1]
        }
        return self
    }

    func get(int index) : any^
    {
        return any^@(self.items[index])
    }

    func each((any^, int : bool)^ callback)
    {
        for var i = 0; i < self.count; i += 1
        {
            if !callback(any^@(self.items[i]), i)
                return
        }
    }

    -- view (gen : any^)^
    -- {
    --     return ll_iterator(self.items, self.count)
    -- }
}

-* TODO: This leaks...
gen ll_iterator(any** items, int count) : any^
{
    for var i = 0; i < count - 1; i += 1
    {
        any^ val = items[i]
        yield val
    }
}*-

func make_arraylist_and_fill() : Arraylist^
{
    var list = new Arraylist(10)
    var test1 = new int(52)
    var test2 = new int(104)
    var test3 = new int(156)
    list.append(test1).append(new int(10)).
          append(test2).append(new int(12)).
          append(new int(14)).append(test3)

    list.remove(test1).remove(test2).remove(test3)

    return list
}

func main()
{
    var list = make_arraylist_and_fill()

    list.each(func(any^ val, int i) : bool {
        int^ num = val
        printf('%d: %d\n', i, num!)
        return num! != 12
    })

    -- for any^ i in list
    -- {
    --     puts (int^@i)^
    -- }
}

