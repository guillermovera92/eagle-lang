struct Node
{
    int value
    Node^ next
    weak Node^ prev
}

class LinkedList
{
    Node^ head
    Node^ tail

    func append(int val)
    {
        var n = new Node
        n->value = val

        if !self->head
        {
            self->head = n
            self->tail = n
            return
        }

        n->prev = self->tail
        self->tail->next = n
        self->tail = n
    }

    func remove(int val)
    {
        for var n = self->head; n; n = n->next
        {
            if n->value != val
                continue
            if !n->prev
                self->head = n->next
            else
                n->prev->next = n->next

            if !n->next
                self->tail = n->prev
            else
                n->next->prev = n->prev
        }
    }

    func forEach((int:)^ callback)
    {
        if !callback
            return

        Node^ n = self->head
        for n; n; n = n->next
        {
            callback(n->value)
        }
    }

    func map((int:int)^ mapper)
    {
        if !mapper
            return

        Node^ n = self->head
        for n; n; n = n->next
        {
            n->value = mapper(n->value)
        }
    }

    func reverse()
    {
        var head = self->head
        self->head = self->tail
        self->tail = head

        for var n = self->head; n; n = n->next
        {
            var next = n->next
            n->next = n->prev
            n->prev = next
        }
    }
}

func main()
{
    var ll = new LinkedList()
    ll->append(11)
    ll->append(22)
    ll->append(33)
    ll->append(68)
    ll->append(44)
    ll->append(55)

    var mm = new LinkedList()
    mm->append(32)

    var printer = func(int num) { puts num; }

    ll->forEach(printer)

    mm->forEach(func(int num) {
        puts num * 2
    })

    puts '--------------------------'

    ll->remove(68)

    ll->map(func(int num) : int {
        return num / 11
    })

    ll->forEach(printer)
    ll->reverse()
    ll->forEach(printer)
}

